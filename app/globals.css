/* Tailwind v4 */
@import "tailwindcss";

/* Base */
html, body, :root { height: 100%; }
body {
  min-height: 100vh;
  background: #000;
  color: #fff;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

/* Text Gradient */
.text-gradient {
  background: linear-gradient(135deg, #8A7CFF 0%, #19C3FF 100%);
  -webkit-background-clip: text;
  background-clip: text;
  -webkit-text-fill-color: transparent;
}

/* Animations */
@keyframes float { 0%,100%{transform:translateY(0)} 50%{transform:translateY(-14px)} }
.animate-float { animation: float 4s ease-in-out infinite; }

@keyframes glow {
  0%,100% { filter: drop-shadow(0 0 8px #8A7CFF) drop-shadow(0 0 15px #19C3FF); }
  50% { filter: drop-shadow(0 0 20px #19C3FF) drop-shadow(0 0 40px #8A7CFF); }
}
.animate-glow { animation: glow 3s ease-in-out infinite; }

/* Components */
@layer components {
  .btn,
  button,
  input[type="submit"],
  input[type="button"] {
    @apply px-4 py-2 rounded-full text-sm font-semibold transition ring-1 ring-white/10;
    background: linear-gradient(135deg, #8A7CFF 0%, #19C3FF 100%);
    box-shadow: 0 0 20px rgba(138,124,255,.35);
    color: #fff !important;
  }
  .btn:hover,
  button:hover { filter: brightness(1.05); }

  .btn-ghost {
    @apply px-4 py-2 rounded-full text-sm font-medium transition ring-1 ring-white/10 bg-white/5 hover:bg-white/10 text-white;
  }

  .glass { @apply bg-white/5 backdrop-blur-md ring-1 ring-white/10; }
  .card-hover { @apply transition-shadow duration-300; }
  .card-hover:hover { box-shadow: 0 10px 40px rgba(138,124,255,.25); }

  /* Dropzone upload */
  .dropzone {
    border: 2px dashed rgba(255,255,255,0.3);
    border-radius: 1rem;
    padding: 2rem;
    text-align: center;
    cursor: pointer;
    transition: border-color 0.3s ease;
  }
  .dropzone:hover {
    border-color: #19C3FF;
  }
}

/* Input agar kontras */
input[type="text"], input[type="search"] {
  @apply bg-white/10 text-white placeholder-white/60 rounded-full;
}

/* ==== Drag & Drop states ==== */
.dropzone {
  position: relative;
  border: 2px dashed rgba(255,255,255,0.3);
  border-radius: 1rem;
  padding: 2rem;
  text-align: center;
  cursor: pointer;
  transition: border-color .25s ease, background-color .25s ease, box-shadow .25s ease;
}
.dropzone:hover { border-color: #19C3FF; }

.dropzone--active {
  border-color: #19C3FF;
  background: radial-gradient(ellipse at center, rgba(25,195,255,.12), rgba(138,124,255,.08) 40%, transparent 70%);
  box-shadow: 0 0 30px rgba(25,195,255,.25);
}

.dropzone__hint {
  color: rgba(255,255,255,.75);
  font-size: .95rem;
}
.dropzone__sub {
  color: rgba(255,255,255,.55);
  font-size: .8rem;
  margin-top: .35rem;
}

/* ==== Footer TipMe ==== */
.footer-tip {
  @apply flex items-center gap-3 px-3 py-2 rounded-xl;
  background: rgba(255, 255, 255, 0.05);
  border: 1px solid rgba(255, 255, 255, 0.1);
}

.footer-tip img {
  @apply h-10 w-10 rounded-md object-contain;
  border: 1px solid rgba(255,255,255,0.15);
}

.footer-tip .addr {
  @apply text-[10px] text-white/60 hover:text-white/80 text-left;
}

/* Safe area helper (iOS) */
:root { --safe-bottom: env(safe-area-inset-bottom, 0px); }
footer { padding-bottom: max(0px, var(--safe-bottom)); }

/* === Like badge (for heart button on cards) === */
.badge-like {
  @apply absolute top-3 right-3 rounded-full bg-white/15 backdrop-blur px-3 py-1
         flex items-center gap-1 text-sm transition hover:bg-white/25;
}

/* Active state when user already liked */
.badge-like[aria-pressed="true"] {
  @apply bg-pink-500/80 text-white pointer-events-none;
}

/* --- Like badge (kanan) --- */
.badge-like-big{
  @apply inline-flex items-center gap-1 px-3 py-1 rounded-full ring-1 ring-white/10 transition;
  @apply bg-white/10 text-white hover:bg-white/15;
}
.badge-like-big.liked{
  @apply bg-pink-500/80 text-white;
}

/* --- Burst animation --- */
@keyframes like-pop { 0%{ transform: scale(0.6); opacity:.0 } 60%{ transform: scale(1.25); opacity:1 } 100%{ transform: scale(1); opacity:0 } }
@keyframes like-float { 0%{ transform: translateY(0) } 100%{ transform: translateY(-18px) } }

.like-burst { animation: like-float 600ms ease-out forwards; }
.like-burst-heart { color: #f472b6; fill: currentColor; animation: like-pop 600ms ease-out forwards; }

"use client";

import { useState } from "react";
import { Heart } from "lucide-react";

type Artwork = {
  id: string;
  title: string;
  url: string;          // pakai nama field url seperti di gallery
  x?: string;
  discord?: string;
  likes?: number;       // total likes (server)
  liked?: boolean;      // apakah user ini sudah like
};

export default function ArtworkCard({
  item,
  onLike,
}: {
  item: Artwork;
  onLike: (id: string) => void | Promise<void>;
}) {
  const [liked, setLiked]   = useState(Boolean(item.liked));
  const [likes, setLikes]   = useState(Number(item.likes || 0));
  const [burst, setBurst]   = useState(false);   // untuk animasi ðŸ’—
  const [busy, setBusy]     = useState(false);   // cegah spam klik

  async function handleLike() {
    if (busy) return;
    setBusy(true);

    // Optimistic UI
    const next = !liked;
    setLiked(next);
    setLikes((n) => Math.max(0, n + (next ? 1 : -1)));
    if (next) {
      setBurst(true);
      setTimeout(() => setBurst(false), 600);
    }

    try {
      await onLike(item.id);     // panggil API / sinkron leaderboard
    } catch {
      // rollback kalau gagal
      setLiked(!next);
      setLikes((n) => Math.max(0, n + (next ? -1 : 1)));
    } finally {
      setBusy(false);
    }
  }

  return (
    <div className="glass rounded-2xl p-3 card-hover flex flex-col relative">
      {/* Gambar */}
      <div className="w-full h-56 rounded-xl bg-white/5 flex items-center justify-center overflow-hidden">
        <img src={item.url} alt={item.title} className="w-full h-full object-contain" />
      </div>

      {/* Judul */}
      <h3 className="mt-3 font-semibold truncate">{item.title}</h3>

      {/* Bar bawah: kiri = tag, kanan = like */}
      <div className="mt-2 flex items-center justify-between gap-3">
        <div className="flex flex-wrap gap-2">
          {item.x && (
            <>
              <button
                className="btn-ghost text-sm px-3 py-1"
                onClick={() => window.open(`https://x.com/${item.x.replace(/^@/,'')}`, "_blank")}
                title="Open X profile"
              >
                @{item.x.replace(/^@/, "")}
              </button>
            </>
          )}

          {item.discord && (
            <button
              onClick={async () => {
                try {
                  await navigator.clipboard.writeText(item.discord!);
                  alert("Discord handle copied.");
                } catch {}
              }}
              className="btn-ghost text-sm px-3 py-1 underline"
              title="Copy Discord handle"
            >
              Copy Discord
            </button>
          )}
        </div>

        {/* Like button di kanan */}
        <div className="relative">
          {/* burst heart (visual only) */}
          {burst && (
            <span className="pointer-events-none absolute -top-5 right-1 like-burst">
              <Heart className="w-6 h-6 like-burst-heart" />
            </span>
          )}

          <button
            onClick={handleLike}
            disabled={busy}
            aria-pressed={liked}
            className={`badge-like-big ${liked ? "liked" : ""}`}
            title={liked ? "Unlike" : "Like"}
          >
            <Heart className={`w-5 h-5 ${liked ? "fill-current" : ""}`} />
            <span className="text-sm">{likes}</span>
          </button>
        </div>
      </div>
    </div>
  );
}


